name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    build:
        strategy:
            matrix:
                os:
                    - macos-latest
                    # - ubuntu-latest
                    # - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install build dependencies
              shell: bash
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      brew install ninja
                  fi

                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]
                  then
                      sudo apt-get install ninja-build
                  fi

            - name: Configure CMake
              run: cmake -S . -B ./build -G "Ninja"

            - name: Run clang-tidy and clang-format
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      brew install llvm
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                      ln -s "/usr/local/opt/llvm/bin/clang-tidy" "/usr/local/bin/clang-tidy"
                      ln -s "/usr/local/opt/llvm/bin/clang-format" "/usr/local/bin/clang-format"
                  fi

                  pwsh -command "Import-Module ./scripts/Linters.psm1; Test-TerminalGamesCode -Verbose"

            - name: Build Project
              run: cmake --build ./build --config Release

    # linting:
    #     strategy:
    #         matrix:
    #             os:
    #                 - macos-latest
    #                 - ubuntu-latest
    #                 - windows-latest

    #     runs-on: ${{ matrix.os }}

    #     steps:
    #         - uses: actions/checkout@v4

    #         - name: Install linting dependencies
    #           run: npm install

    #         - name: Run cspell
    #           run: npx cspell .

    #         - name: Run prettier (for JSON linting)
    #           if: success() || failure()
    #           run: npx prettier . --check

    #         - name: Run PSScriptAnalyzer (for PowerShell linting)
    #           if: success() || failure()
    #           shell: pwsh
    #           run: Invoke-ScriptAnalyzer -Path . -Recurse -Severity Information

    #         - name: Run gitattributes linter
    #           if: success() || failure()
    #           shell: pwsh
    #           run: |
    #               Import-Module ./scripts/Linters.psm1
    #               Test-GitAttributesFile -Verbose
