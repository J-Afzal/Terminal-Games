name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    build:
        strategy:
            matrix:
                os:
                    # - macos-latest
                    # - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Configure CMake
              run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release

            - name: Build Project
              run: cmake --build ${{github.workspace}}/build --config Release

    linting:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Run cspell
              if: success() || failure()
              run: |
                npm install -g cspell@8.17.0
                cspell .

            - name: Run markdownlint
              if: success() || failure()
              run: |
                npm install -g markdownlint-cli@0.43.0
                markdownlint .

            - name: Run yamllint
              if: success() || failure()
              run: |
                pip install --user yamllint==1.35.1
                yamllint .

            - name: Run prettier (for JSON linting)
              if: success() || failure()
              run: |
                npm install -g prettier@3.4.2
                prettier . --check

            - name: Run PSScriptAnalyzer (for PowerShell linting)
              if: success() || failure()
              shell: pwsh
              run: |
                Invoke-ScriptAnalyzer -Path . -Recurse -Severity Information

            - name: Run gitattributes linter
              if: success() || failure()
              shell: pwsh
              run: |
                Import-Module ./scripts/Linters.psm1
                Test-GitattributesFile -Verbose

            - name: Run clang-tidy
              if: success() || failure()
              shell: pwsh
                # git clone https://github.com/llvm/llvm-project.git
                # cd llvm-project
                # cmake -B build -S llvm -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang-tools-extra"
                # cmake --build build --target clang-tidy --config Release
                # ./build/Release/clang-tidy
              run: |
                sudo apt-get install clang-tidy

                git ls-files -c | ForEach-Object { if ($_.Split(".")[-1] -In ("cpp", "hpp")) { $_ } } | clang-tidy -checks=*