name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    build:
        strategy:
            matrix:
                os:
                    - macos-latest
                    # - ubuntu-latest
                    # - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install build dependencies
              shell: pwsh
              run: |
                  if ("${{ matrix.os }}" -eq "macos-latest")
                  {
                      cmake --version
                      ninja --version
                      clang --version
                      # clang-tidy --version

                      brew install cmake@3.31.3
                      brew install ninja@1.12.1

                      cmake --version
                      ninja --version
                      clang --version
                      # clang-tidy --version
                  }

                  if ("${{ matrix.os }}" -eq "ubuntu-latest")
                  {

                  }

                  if ("${{ matrix.os }}" -eq "windows-latest")
                  {

                  }

            - name: Configure CMake
              run: cmake -S . -B ./build -G "Ninja" -D "CMAKE_BUILD_TYPE=Release"

            - name: Run clang-tidy
              shell: pwsh
              run: |
                  Import-Module ./scripts/Linters.psm1

                  Test-TerminalGamesCode -Verbose

            - name: Build Project
              run: cmake --build ./build --config Release

    linting:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install linting dependencies
              run: npm install

            - name: Run cspell
              run: npx cspell .

            - name: Run prettier (for JSON linting)
              if: success() || failure()
              run: npx prettier . --check

            - name: Run PSScriptAnalyzer (for PowerShell linting)
              if: success() || failure()
              shell: pwsh
              run: Invoke-ScriptAnalyzer -Path . -Recurse -Severity Information

            - name: Run gitattributes linter
              if: success() || failure()
              shell: pwsh
              run: |
                  Import-Module ./scripts/Linters.psm1

                  Test-GitAttributesFile -Verbose
