name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    build:
        strategy:
            matrix:
                os:
                    # - macos-latest
                    - ubuntu-latest
                    # - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install build dependencies
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      brew update
                      brew upgrade

                      brew install ninja
                  fi

                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]
                  then
                      sudo apt-get update
                      sudo apt-get upgrade

                      sudo apt install ninja-build
                      sudo apt install clang
                      sudo apt install clang-format
                      sudo apt install clang-tidy

                      cmake --version
                      ninja --version
                      clang --version
                      clang-format --version
                      clang-tidy --version
                  fi

                  if [ "${{ matrix.os }}" = "windows-latest" ]
                  then
                      choco install cmake --version 3.31.3 -y
                      choco install ninja --version 1.12.1 -y
                      choco install llvm --version 19.1.5 -y

                      cmake --version
                      ninja --version
                      clang --version
                      clang-format --version
                      clang-tidy --version
                  fi

            - name: Configure CMake
              run: cmake -S . -B ./build -G "Ninja" -D "CMAKE_CXX_COMPILER=clang++"

            - name: Run clang-tidy and clang-format
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      brew install llvm
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                      ln -s "/usr/local/opt/llvm/bin/clang-tidy" "/usr/local/bin/clang-tidy"
                      ln -s "/usr/local/opt/llvm/bin/clang-format" "/usr/local/bin/clang-format"
                  fi

                  pwsh -command "Import-Module ./scripts/Linters.psm1; Test-TerminalGamesCode -Verbose"

            - name: Build Project
              run: cmake --build ./build --config Release

    linting:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install linting dependencies
              run: npm install

            - name: Run cspell
              run: npx cspell .

            - name: Run prettier (for JSON linting)
              if: success() || failure()
              run: npx prettier . --check

            - name: Run PSScriptAnalyzer (for PowerShell linting)
              if: success() || failure()
              shell: pwsh
              run: Invoke-ScriptAnalyzer -Path . -Recurse -Severity Information

            - name: Run gitattributes linter
              if: success() || failure()
              shell: pwsh
              run: |
                  Import-Module ./scripts/Linters.psm1

                  Test-GitAttributesFile -Verbose
