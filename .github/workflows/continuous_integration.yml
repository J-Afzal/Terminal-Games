name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    build:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: bash

        steps:
            - uses: actions/checkout@v4

            - name: Install build dependencies
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      brew install ninja
                  fi

                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]
                  then
                      sudo apt-get install ninja-build
                  fi

                  if [ "${{ matrix.os }}" = "windows-latest" ]
                  then
                      choco install ninja -y
                  fi

            - name: Configure CMake
              run: cmake -S . -B ./build -G "Ninja"

            - name: Run clang-tidy and clang-format
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      # Override pre-installed clang and add to path
                      brew install llvm
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                  fi

                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]
                  then
                      # Install brew to get latest llvm and clang tools
                      test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
                      test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                      echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
                      export PATH="$HOME/.linuxbrew/bin:$PATH"

                      brew install llvm
                  fi

                  if [ "${{ matrix.os }}" = "windows-latest" ]
                  then
                      choco upgrade llvm -y
                  fi

                  pwsh -command "Import-Module ./scripts/Linters.psm1; Test-CodeUsingClang -Verbose"

            - name: Build Project
              run: cmake --build ./build --config Release

            - uses: actions/upload-artifact@v4
              with:
                  name: terminal-games-${{ matrix.os }}
                  path: ./build/terminal-games-${{ matrix.os }}*
                  if-no-files-found: error

    linting:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: pwsh

        steps:
            - uses: actions/checkout@v4

            - name: Install linting dependencies
              run: npm install

            - name: Run cspell
              if: success() || failure()
              run: |
                  Import-Module ./scripts/Linters.psm1
                  Test-CodeUsingCSpell -Verbose

            - name: Run prettier
              if: success() || failure()
              run: |
                  Import-Module ./scripts/Linters.psm1
                  Test-CodeUsingPrettier -Verbose

            - name: Run PSScriptAnalyzer
              if: success() || failure()
              run: |
                  Import-Module ./scripts/Linters.psm1
                  Test-CodeUsingPSScriptAnalyzer -Verbose

            - name: Run gitattributes linter
              if: success() || failure()
              run: |
                  Import-Module ./scripts/Linters.psm1
                  Test-GitAttributesFile -Verbose
