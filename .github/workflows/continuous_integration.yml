name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    build:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install build dependencies
              shell: bash
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      brew install ninja
                      brew install llvm
                  fi

                  if [ "${{ matrix.os }}" = "ubuntu-latest" ]
                  then
                      sudo apt-get install ninja-build
                  fi

                  if [ "${{ matrix.os }}" = "windows-latest" ]
                  then
                      choco install ninja -y
                  fi

            - name: Configure CMake
              run: cmake -S . -B ./build -G "Ninja"

            - name: Run clang-tidy and clang-format
              shell: bash
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]
                  then
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                  fi

                  pwsh -command "Import-Module ./scripts/Linters.psm1; Test-TerminalGamesCode -Verbose"

            - name: Build Project
              run: cmake --build ./build --config Release

            - uses: actions/upload-artifact@v4
              with:
                  name: terminal-games-${{ matrix.os }}
                  path: ./build/terminal-games-${{ matrix.os }}*
                  if-no-files-found: error

    release:
        needs: build
        runs-on: ubuntu-latest

        steps:
            - uses: actions/download-artifact@v4
              with:
                pattern: terminal-games-*

            - name: Extract artifacts
              run: |
                7z x ./terminal-games-macos-latest
                7z x ./terminal-games-ubuntu-latest
                7z x ./terminal-games-windows-latest

            - name: Get current date
              run: echo "date=$(date +%Y%m%d)" >> $GITHUB_ENV

            - name: Create new release
              run: gh release create cd-release-${{ env.date }}-${{ github.run_number }} ./terminal-games-macos-latest ./terminal-games-ubuntu-latest ./terminal-games-windows-latest.exe --draft --generate-notes --latest

    linting:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v4

            - name: Install linting dependencies
              run: npm install

            - name: Run cspell
              run: npx cspell .

            - name: Run prettier (for JSON linting)
              if: success() || failure()
              run: npx prettier . --check

            - name: Run PSScriptAnalyzer (for PowerShell linting)
              if: success() || failure()
              shell: pwsh
              run: Invoke-ScriptAnalyzer -Path . -Recurse -Severity Information

            - name: Run gitattributes linter
              if: success() || failure()
              shell: pwsh
              run: |
                  Import-Module ./scripts/Linters.psm1
                  Test-GitAttributesFile -Verbose
