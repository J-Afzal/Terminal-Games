name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - main

jobs:
    build:
        uses: ./.github/workflows/Build.yml

    lint:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    - windows-latest

        defaults:
            run:
                shell: pwsh

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                    submodules: true

            - name: Install linting dependencies
              id: dependencies
              shell: bash
              run: |
                    echo "##[section]Installing linting dependencies..."

                    echo "##[command]Installing npm dependencies..."
                    npm install

                    echo "##[command]Installing python dependencies..."
                    pip install -r ./requirements.txt

                    if [ ${{ inputs.run_cpp_linters }} == true ]
                    then
                        if [ ${{ matrix.os }} == macos-latest ]
                        then
                            brew install ninja
                            brew install llvm
                            brew install doxygen

                        elif [ ${{ matrix.os }} == ubuntu-latest ]
                        then
                            sudo apt-get install ninja-build

                            # Install brew to get latest llvm, clang tools and doxygen
                            test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
                            test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                            echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc

                            brew install llvm
                            brew install doxygen

                        elif [ ${{ matrix.os }} == windows-latest ]
                        then
                            choco install ninja -y
                            choco upgrade llvm -y
                            choco install doxygen.portable -y

                        else
                            echo "##[error]'${{ matrix.os }}' is an unsupported platform."
                        fi
                    fi

                    echo "##[section]All linting dependencies installed!"

            - name: Check git status
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                    git status
                    git diff --name-only | ForEach-Object { Write-Output "################$_################"; Get-Content $_ }

            - name: Run gitignore linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                    Import-Module ./submodules/Linters/modules/Git.psd1
                    Test-GitIgnoreFile -Verbose

            - name: Run gitattributes linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                    Import-Module ./submodules/Linters/modules/Git.psd1
                    Test-GitAttributesFile -Verbose

            - name: Run cspell configuration linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                    Import-Module ./submodules/Linters/modules/CSpell.psd1
                    Test-CSpellConfiguration -Verbose

            - name: Run cspell
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                    Import-Module ./submodules/Linters/modules/CSpell.psd1
                    Test-CodeUsingCSpell -Verbose

            - name: Run prettier
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              run: |
                    Import-Module ./submodules/Linters/modules/Prettier.psd1
                    Test-CodeUsingPrettier -Verbose

            - name: Run PSScriptAnalyzer
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_powershell_linters
              run: |
                    Import-Module ./submodules/Linters/modules/PSScriptAnalyzer.psd1
                    Test-CodeUsingPSScriptAnalyzer -Verbose

            - name: Check doxygen documentation is up-to-date
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                    Import-Module ./submodules/Linters/modules/Doxygen.psd1
                    Test-DoxygenDocumentation -Platform ${{ matrix.os }} -ResetLocalGitChanges -Verbose

            - name: Upload doxygen documentation
              uses: actions/upload-artifact@v4
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              with:
                    name: doxygen-docs-${{ matrix.os }}
                    path: ./docs/html/

            - name: Run clang-format
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                    Import-Module ./submodules/Linters/modules/ClangTools.psd1
                    Test-CodeUsingClangFormat -Platform ${{ matrix.os }} -Verbose

            # Needed for the Build-CppCodeUsingCMake command.
            - uses: ilammy/msvc-dev-cmd@v1
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters && ${{ matrix.os }} == 'windows-latest'

            - name: Run clang-tidy
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cpp_linters
              run: |
                    # Configure CMake to create the "compile_commands.json" file
                    Import-Module ./modules/Build.psd1
                    Build-CppCodeUsingCMake -Platform ${{ matrix.os }} -BuildType Release -BuildDirectory build -Parallel 8 -ConfigureOnly -Verbose

                    Import-Module ./submodules/Linters/modules/ClangTools.psd1
                    Test-CodeUsingClangTidy -Platform ${{ matrix.os }} -Verbose
