name: Continuous Integration

run-name: CI - ${{ github.run_number }} - ${{ github.head_ref }}

on:
    pull_request:
        branches:
            - master

jobs:
    # build:
    #     strategy:
    #         matrix:
    #             os:
    #                 - macos-latest
    #                 - ubuntu-latest
    #                 - windows-latest

    #     runs-on: ${{ matrix.os }}
    #     defaults:
    #         run:
    #             shell: pwsh

    #     steps:
    #         - uses: actions/checkout@v4

    #         - name: Install build dependencies
    #           run: |
    #               Import-Module ./modules/TerminalGames.psd1
    #               Install-BuildDependencies -Platform "${{ matrix.os }}" -Verbose

    #         - name: Configure CMake
    #           run: cmake -S . -B ./build -G "Ninja"

    #         - name: Build Project
    #           run: cmake --build ./build --config Release

    #         - uses: actions/upload-artifact@v4
    #           with:
    #               name: terminal-games-${{ matrix.os }}
    #               path: ./build/terminal-games-${{ matrix.os }}*
    #               if-no-files-found: error

    lint:
        strategy:
            matrix:
                os:
                    - macos-latest
                    - ubuntu-latest
                    # - windows-latest

        runs-on: ${{ matrix.os }}
        defaults:
            run:
                shell: pwsh

        steps:
            - uses: actions/checkout@v4

            - name: Install linting dependencies
              id: dependencies
              run: |
                  Import-Module ./modules/TerminalGames.psd1
                  Install-LintingDependencies -Platform "${{ matrix.os }}" -Verbose

            # - name: Run gitignore linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-GitIgnoreFile -Verbose

            # - name: Run gitattributes linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-GitAttributesFile -Verbose

            # - name: Run cspell config linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-CSpellConfigurationFile -Verbose

            # - name: Run prettierignore linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-PrettierIgnoreFile -Verbose

            # - name: Run cspell
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-CodeUsingCSpell -Verbose

            # - name: Run prettier
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-CodeUsingPrettier -Verbose

            # - name: Run PSScriptAnalyzer
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success'
            #   run: |
            #       Import-Module ./modules/TerminalGames.psd1
            #       Test-CodeUsingPSScriptAnalyzer -Verbose

            - name: Run clang-tidy and clang-format
              if: (success() || failure()) && steps.dependencies.outcome == 'success'
              shell: bash
              run: |
                  if [ ${{ matrix.os }} = macos-latest ]
                  then
                      # Override pre-installed clang and add to path
                      brew install llvm
                      export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
                  fi

                  if [ ${{ matrix.os }} = ubuntu-latest ]
                  then
                      # Install brew to get latest llvm and clang tools
                      test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
                      test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                      echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
                      export PATH="$HOME/.linuxbrew/bin:$PATH"

                      brew install llvm
                  fi

                  if [ ${{ matrix.os }} = windows-latest ]
                  then
                      choco upgrade llvm -y
                  fi

                  pwsh -command "Import-Module ./modules/TerminalGames.psd1; Test-CodeUsingClang -Verbose"
