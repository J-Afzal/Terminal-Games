name: Linting

on:
    workflow_call:
        inputs:
            path_to_linters_submodule_root:
                required: true
                type: string
            run_gitignore_linter:
                required: false
                type: boolean
                default: true
            run_gitattributes_linter:
                required: false
                type: boolean
                default: true
            run_cspell_configuration_linter:
                required: false
                type: boolean
                default: true
            run_prettier_ignore_linter:
                required: false
                type: boolean
                default: true
            run_cspell_linter:
                required: false
                type: boolean
                default: true
            run_prettier_linter:
                required: false
                type: boolean
                default: true
            run_psscript_analyzer_linter:
                required: false
                type: boolean
                default: true
            run_clang_tools_linter:
                required: false
                type: boolean
                default: true

jobs:
    lint:
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                os: [macos-latest, ubuntu-latest, windows-latest]

        defaults:
            run:
                shell: pwsh

        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            # - name: Install linting dependencies
            #   id: dependencies
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Install-LintingDependencies -Platform "${{ matrix.os }}" -Verbose

            # - name: Run gitignore linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_gitignore_linter
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Test-GitIgnoreFile -Verbose

            # - name: Run gitattributes linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_gitattributes_linter
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Test-GitAttributesFile -Verbose

            - name: Run cspell configuration linter
              if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cspell_configuration_linter
              run: |
                  Get-ChildItem -Force

                  Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
                  Test-CSpellConfigurationFile -Verbose

            # - name: Run prettierignore linter
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_prettier_ignore_linter
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Test-PrettierIgnoreFile -Verbose

            # - name: Run cspell
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_cspell_linter
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Test-CodeUsingCSpell -Verbose

            # - name: Run prettier
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_prettier_linter
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Test-CodeUsingPrettier -Verbose

            # - name: Run PSScriptAnalyzer
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_psscript_analyzer_linter
            #   run: |
            #       Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1
            #       Test-CodeUsingPSScriptAnalyzer -Verbose

            # - name: Run clang tools
            #   if: (success() || failure()) && steps.dependencies.outcome == 'success' && inputs.run_clang_tools_linter
            #   shell: bash
            #   run: |
            #       # Install the ninja and the latest version of clang-tidy and clang-format
            #       if [ ${{ matrix.os }} = macos-latest ]
            #       then
            #           brew install ninja
            #           brew install llvm
            #           # Override pre-installed clang by adding to the path
            #           export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
            #       fi

            #       if [ ${{ matrix.os }} = ubuntu-latest ]
            #       then
            #           sudo apt-get install ninja-build

            #           # Install brew to get latest llvm and clang tools
            #           test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
            #           test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
            #           echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
            #           export PATH="$HOME/.linuxbrew/bin:$PATH"

            #           brew install llvm
            #       fi

            #       if [ ${{ matrix.os }} = windows-latest ]
            #       then
            #           choco install ninja -y
            #           choco upgrade llvm -y
            #       fi

            #       # Configure CMake to create the 'compile_commands.json' file
            #       cmake -S . -B ./build -G "Ninja"

            #       pwsh -command "Import-Module ${{ inputs.path_to_linters_submodule_root }}/linters-ps1/Linters.psd1; Test-CodeUsingClangTools -Verbose"
